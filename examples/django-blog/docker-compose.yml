version: "3.8"

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: blogdb
      POSTGRES_USER: bloguser
      POSTGRES_PASSWORD: blogpass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bloguser -d blogdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Django Application - Development
  web-dev:
    build:
      context: .
      target: development
    environment:
      - DEBUG=true
      - SECRET_KEY=django-dev-secret-key-change-in-production
      - DB_HOST=db
      - DB_NAME=blogdb
      - DB_USER=bloguser
      - DB_PASSWORD=blogpass
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "cd blogproject &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    restart: unless-stopped
    profiles:
      - development

  # Django Application - Production
  web-prod:
    build:
      context: .
      target: production
    environment:
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY:-django-prod-secret-key-please-change}
      - DB_HOST=db
      - DB_NAME=blogdb
      - DB_USER=bloguser
      - DB_PASSWORD=blogpass
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - SECURE_SSL_REDIRECT=false
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    profiles:
      - production

  # Migration Service
  migrate:
    build:
      context: .
      target: migration
    environment:
      - DB_HOST=db
      - DB_NAME=blogdb
      - DB_USER=bloguser
      - DB_PASSWORD=blogpass
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "cd blogproject &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput"
    profiles:
      - migration

  # Nginx (for production)
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
    ports:
      - "80:80"
    depends_on:
      - web-prod
    restart: unless-stopped
    profiles:
      - production

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  static_volume:
  media_volume:
  logs_volume:
  redis_data:

networks:
  default:
    driver: bridge
