# Flask Quality Example Configuration
[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "flask-quality-example"
version = "1.0.0"
description = "Flask application with comprehensive code quality tools"
authors = [{name = "Docker Python Guide", email = "example@example.com"}]
license = {text = "MIT"}
requires-python = ">=3.11"

# Ruff configuration for linting and formatting
[tool.ruff]
target-version = "py311"
line-length = 88
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "ARG",   # flake8-unused-arguments
    "SIM",   # flake8-simplify
    "ICN",   # flake8-import-conventions
    "PTH",   # flake8-use-pathlib
    "PL",    # pylint
    "RUF",   # ruff-specific rules
]

ignore = [
    "E501",    # line too long (handled by formatter)
    "B008",    # do not perform function calls in argument defaults
    "W191",    # indentation contains tabs
    "B904",    # allow raising exceptions without from e
    "PLR0913", # too many arguments to function call
    "PLR0911", # too many return statements
    "PLR2004", # magic value used in comparison
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # allow unused imports in __init__.py

[tool.ruff.lint.isort]
force-single-line = false
force-sort-within-sections = false
known-first-party = ["app"]

# Pyright configuration for type checking
[tool.pyright]
typeCheckingMode = "strict"
pythonVersion = "3.11"
include = ["app.py"]
exclude = [
    ".venv",
    "**/__pycache__",
    "**/node_modules"
]

# Additional type checking options
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportUntypedFunctionDecorator = false  # Flask decorators
reportUntypedClassDecorator = false
reportUntypedBaseClass = false
reportUntypedNamedTuple = false
reportPrivateUsage = false
reportConstantRedefinition = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportOverlappingOverload = true

# Flask-specific settings
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
